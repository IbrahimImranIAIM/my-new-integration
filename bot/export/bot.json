{
    "version": "1.18",
    "settings": {
      "defaultLanguage": "en",
      "languages": [],
      "description": "Currency conversion bot with CI/CD - Updated via GitHub Actions",
      "id": "e98d452e-abb8-46e8-a2c4-40b03e889172",
      "inactivityTimeout": 30,
      "botVariables": [],
      "userVariables": [],
      "nodeRepetitionLimit": 3,
      "configVariables": {
        "EXCHANGE_RATE_API_KEY": "58141b0607eb18e1dfe13cbf"
      },
      "cognitiveConfigs": {
        "openAi": {}
      },
      "useLlmz": true,
      "defaultBestModel": "openai__gpt-4.1-2025-04-14",
      "defaultFastModel": "openai__gpt-4.1-mini-2025-04-14",
      "useClient": true,
      "llmzVersion": "01-Oct-2024",
      "autonomousModel": "best-model",
      "fallbackModel": "google-ai__models/gemini-2.0-flash",
      "usePushToGit": false,
      "disablePublishButton": false
    },
    "flows": [
      {
        "id": "wf-error",
        "name": "Error",
        "startNode": "nd-98dc0bcc87",
        "variables": [],
        "links": [
          {
            "id": "edg-1cb5862648",
            "source": "nd-98dc0bcc87",
            "sourcePort": "trs-02c7129430",
            "target": "nd-58fca56e01"
          },
          {
            "id": "edg-1c28c96d6a",
            "source": "nd-58fca56e01",
            "sourcePort": "nd-58fca56e01",
            "target": "nd-e05f59dd66"
          }
        ],
        "nodes": [
          {
            "comment": "<p><strong><span style=\"font-size: 18px\">‚õîÔ∏è When something goes wrong</span></strong></p><p><br>This workflow is executed when there's an <strong>unexpected error</strong> in one of the other workflows.</p><p></p><p>You can use this to inform the user of the situation before ending the conversation.</p>",
            "type": "comment",
            "id": "nd-8ff3d7d295",
            "name": "Comment1",
            "deletable": true,
            "instructions": [],
            "height": 148,
            "width": 401,
            "x": 90,
            "y": -45
          },
          {
            "instructions": [
              {
                "id": "ins-2762f70004",
                "type": "content",
                "content": {
                  "type": "text",
                  "text": {
                    "staticValue": "Sorry, an error occurred. Please try again later",
                    "dynamicValue": "",
                    "valueType": "static"
                  },
                  "typing": {
                    "valueType": "static",
                    "staticValue": true
                  }
                },
                "nodeId": "nd-58fca56e01",
                "transitions": []
              }
            ],
            "defaultTransition": {
              "targetNodeId": "nd-e05f59dd66"
            },
            "type": "standard",
            "id": "nd-58fca56e01",
            "name": "Handler",
            "deletable": true,
            "x": 450,
            "y": 120
          },
          {
            "id": "nd-98dc0bcc87",
            "name": "On_Error",
            "type": "entry",
            "deletable": false,
            "variables": [],
            "instructions": [
              {
                "id": "trs-02c7129430",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "nd-58fca56e01"
                },
                "transitions": [],
                "nodeId": "nd-98dc0bcc87"
              }
            ],
            "x": 90,
            "y": 120
          },
          {
            "id": "nd-e05f59dd66",
            "name": "End",
            "type": "end",
            "variables": [],
            "deletable": false,
            "instructions": [
              {
                "id": "trs-945140a646",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "END"
                },
                "transitions": [],
                "nodeId": "nd-e05f59dd66"
              }
            ],
            "x": 810,
            "y": 120
          }
        ]
      },
      {
        "id": "wf-timeout",
        "name": "Timeout",
        "startNode": "nd-9f7f3268ac",
        "variables": [],
        "links": [
          {
            "id": "edg-b0d2adcd13",
            "source": "nd-e6c012a652",
            "sourcePort": "nd-e6c012a652",
            "target": "nd-199fdcf439"
          },
          {
            "id": "edg-6d17a0591b",
            "source": "nd-9f7f3268ac",
            "sourcePort": "trs-0c7a9a0003",
            "target": "nd-e6c012a652"
          }
        ],
        "nodes": [
          {
            "instructions": [],
            "defaultTransition": {
              "targetNodeId": "nd-199fdcf439"
            },
            "type": "standard",
            "id": "nd-e6c012a652",
            "name": "Handler",
            "deletable": true,
            "x": 435,
            "y": 105
          },
          {
            "comment": "<p><strong><span style=\"font-size: 18px\">‚åõÔ∏è When conversation times out</span></strong></p><p><br>This workflow is executed when the conversation <strong>times out</strong> before it had time to flow to an <strong>End Node</strong>.</p><p></p><p>The <strong>Timeout Delay</strong> is configurable in the <strong>Chatbot Settings.</strong></p><p></p><p>You can use this to inform the user of the situation before ending the conversation.</p>",
            "type": "comment",
            "id": "nd-441efa6c42",
            "name": "Comment1",
            "deletable": true,
            "instructions": [],
            "height": 173,
            "width": 401,
            "x": 105,
            "y": -90
          },
          {
            "id": "nd-9f7f3268ac",
            "name": "On_Timeout",
            "type": "entry",
            "deletable": false,
            "variables": [],
            "instructions": [
              {
                "id": "trs-0c7a9a0003",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "nd-e6c012a652"
                },
                "transitions": []
              }
            ],
            "x": 100,
            "y": 100
          },
          {
            "id": "nd-199fdcf439",
            "name": "End",
            "type": "end",
            "variables": [],
            "deletable": false,
            "instructions": [
              {
                "id": "trs-bf76943d55",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "END"
                },
                "transitions": []
              }
            ],
            "x": 795,
            "y": 105
          }
        ]
      },
      {
        "id": "wf-conversation-end",
        "name": "Conversation End",
        "startNode": "nd-c0d3bd2c92",
        "variables": [],
        "links": [
          {
            "id": "edg-3cb8028ff6",
            "source": "nd-c0d3bd2c92",
            "sourcePort": "trs-92c6f93b0c",
            "target": "nd-2db7499cc6"
          },
          {
            "id": "edg-8a88f687a0",
            "source": "nd-2db7499cc6",
            "sourcePort": "nd-2db7499cc6",
            "target": "nd-d0c2a6be81"
          }
        ],
        "nodes": [
          {
            "instructions": [],
            "defaultTransition": {
              "targetNodeId": "nd-d0c2a6be81"
            },
            "type": "standard",
            "id": "nd-2db7499cc6",
            "name": "Handler",
            "deletable": true,
            "x": 420,
            "y": 105
          },
          {
            "comment": "<p><strong><span style=\"font-size: 18px\">üëã Before Conversation Ends</span></strong></p><p><br>This workflow is executed when right before the conversation <strong>Ends Explicitly.</strong></p><p></p><p>An <strong>Explicit Ending</strong> happens when a workflow transitions on an <strong>End Node</strong>.</p>",
            "type": "comment",
            "id": "nd-6d5d3f41dd",
            "name": "Comment1",
            "deletable": true,
            "instructions": [],
            "height": 148,
            "width": 461,
            "x": 105,
            "y": -45
          },
          {
            "id": "nd-c0d3bd2c92",
            "name": "On_Explicit_Ending",
            "type": "entry",
            "deletable": false,
            "variables": [],
            "instructions": [
              {
                "id": "trs-92c6f93b0c",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "nd-2db7499cc6"
                },
                "transitions": []
              }
            ],
            "x": 100,
            "y": 100
          },
          {
            "id": "nd-d0c2a6be81",
            "name": "End",
            "type": "end",
            "variables": [],
            "deletable": false,
            "instructions": [
              {
                "id": "trs-7004dbb2b6",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "END"
                },
                "transitions": []
              }
            ],
            "x": 780,
            "y": 105
          }
        ]
      },
      {
        "topicId": "tpc-global",
        "id": "wf-main",
        "name": "Main",
        "startNode": "nd-2bb9db230d",
        "variables": [
          {
            "id": "var-b470db2584",
            "name": "convertedAmount",
            "type": "object",
            "description": "",
            "typings": "Aim_dev_team_1_my_new_integrationConvertAmount",
            "scope": "workflow"
          },
          {
            "id": "var-fe8b5f8cba",
            "name": "userMessage",
            "type": "string",
            "description": "",
            "scope": "workflow"
          },
          {
            "id": "var-b9622c628e",
            "name": "fx",
            "type": "object",
            "description": "",
            "typings": "Aim_dev_team_1_my_new_integrationParseAndConvert",
            "scope": "workflow"
          }
        ],
        "links": [],
        "nodes": [
          {
            "id": "nd-2bb9db230d",
            "name": "Start",
            "type": "start",
            "deletable": false,
            "instructions": [
              {
                "id": "trs-8b0779edc5",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "nd-f980a87218"
                },
                "transitions": [],
                "nodeId": "nd-2bb9db230d"
              }
            ],
            "x": -1050,
            "y": -210,
            "kbPriority": {
              "enabled": true,
              "searchScope": "specific",
              "kbs": [
                "kb-3a341e7200"
              ]
            }
          },
          {
            "id": "nd-80ac4ff158",
            "name": "End",
            "type": "end",
            "deletable": false,
            "instructions": [
              {
                "id": "trs-0260f5e672",
                "type": "transition",
                "condition": {
                  "type": "expression",
                  "payload": "true"
                },
                "destination": {
                  "node": "END"
                },
                "transitions": [],
                "nodeId": "nd-80ac4ff158"
              }
            ],
            "x": 420,
            "y": -60
          },
          {
            "type": "autonomous",
            "deletable": true,
            "x": 45,
            "y": 30,
            "instructions": [
              {
                "id": "ins-1465ce0650",
                "agentId": "KnowledgeAgent",
                "toolId": "knowledge-query",
                "toolType": "search",
                "type": "autonomous",
                "label": "Search Knowledge Bases",
                "category": "Knowledge Bases",
                "nodeId": "nd-54aa0c19de",
                "transitions": [],
                "description": "Searches for information in the official knowledge bases.",
                "kbs": {
                  "valueType": "static",
                  "staticValue": [
                    "kb-3a341e7200"
                  ],
                  "dynamicValue": ""
                },
                "advanced": {
                  "mode": "breadcrumb",
                  "contextDepth": 2,
                  "maxTokens": 20
                },
                "manualFields": []
              }
            ],
            "id": "nd-54aa0c19de",
            "name": "AutonomousNode",
            "writableVariables": [],
            "allowConversation": true,
            "guidelines": {
              "valueType": "dynamic",
              "dynamicValue": "You are a RAG model that answers user questions using the company_faq text file. Don't add any starting text I'll add that in myself."
            },
            "readableVariables": []
          },
          {
            "type": "standard",
            "deletable": true,
            "x": -60,
            "y": -510,
            "instructions": [
              {
                "id": "ins-e82a748b01",
                "type": "action",
                "category": "aim-dev-team-1/my-new-integration",
                "origin": "integration",
                "label": "Parse And Convert",
                "integration": {
                  "id": "aim-dev-team-1/my-new-integration",
                  "action": "parseAndConvert"
                },
                "nodeId": "nd-b7c70629a5",
                "data": {
                  "message": {
                    "valueType": "dynamic",
                    "dynamicValue": "{{workflow.userMessage}}"
                  }
                },
                "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();",
                "transitions": [],
                "outputVariableId": "var-b9622c628e"
              }
            ],
            "defaultTransition": {
              "targetNodeId": "nd-6119499971"
            },
            "id": "nd-b7c70629a5",
            "name": "Standard1"
          },
          {
            "type": "autonomous",
            "deletable": true,
            "x": -75,
            "y": -285,
            "instructions": [
              {
                "id": "ins-0af9ee5508",
                "type": "autonomous",
                "toolType": "integration",
                "origin": "integration",
                "label": "Parse And Convert",
                "integrationId": "aim-dev-team-1/my-new-integration",
                "actionName": "parseAndConvert",
                "nodeId": "nd-f980a87218",
                "manualFields": [],
                "message": "",
                "transitions": []
              },
              {
                "id": "ins-04185f09e4",
                "type": "autonomous",
                "toolType": "integration",
                "origin": "integration",
                "label": "Get Exchange Rate",
                "category": "aim-dev-team-1/my-new-integration",
                "integrationId": "aim-dev-team-1/my-new-integration",
                "actionName": "getRate",
                "nodeId": "nd-f980a87218",
                "manualFields": [],
                "from": "",
                "to": "",
                "transitions": []
              }
            ],
            "allowConversation": true,
            "readableVariables": [],
            "id": "nd-f980a87218",
            "name": "Autonomous1",
            "guidelines": {
              "valueType": "dynamic",
              "dynamicValue": "OBJECTIVE\n\nAssist the user with their request by selecting and using the appropriate tool from the available options.\n\nTOOLS\n\nknowledge_base\nUse this tool to answer questions related to company policies, business hours, or product information.\n\nData Source: company_faq.txt\n\nmy-new-integration\nUse this tool only when the user explicitly requests a currency conversion rate between two countries.\n\nBEHAVIOR GUIDELINES\n\nAlways start by greeting the user.\n\nAnalyze the user‚Äôs request to determine the correct tool to use.\n\nIf the request is unclear, ask a clarifying question.\n\nNever fabricate information. If the request cannot be fulfilled, respond politely and inform the user."
            }
          },
          {
            "type": "standard",
            "deletable": true,
            "x": -705,
            "y": -615,
            "instructions": [
              {
                "id": "ins-e4a59a4857",
                "category": "Capture Information",
                "type": "capture",
                "entityId": "prompts://RawInput/v1",
                "entityName": "Raw Input",
                "label": "Raw Input",
                "kbPriority": {
                  "enabled": true,
                  "searchScope": "specific",
                  "kbs": [
                    "kb-3a341e7200"
                  ]
                },
                "nodeId": "nd-cabf8fcb9c",
                "variableId": "var-fe8b5f8cba",
                "question": {
                  "staticValue": "",
                  "dynamicValue": "",
                  "valueType": "dynamic"
                },
                "validation": {
                  "validators": []
                },
                "choice": {
                  "options": {
                    "staticValue": [],
                    "dynamicValue": "",
                    "valueType": "static"
                  }
                },
                "retry": {
                  "maxRetries": 2,
                  "retryMessage": {
                    "staticValue": "",
                    "dynamicValue": "",
                    "valueType": "dynamic"
                  }
                },
                "cancellation": {
                  "cancellable": true,
                  "confirmCancel": true,
                  "confirmCancelMessage": {
                    "staticValue": "",
                    "dynamicValue": "",
                    "valueType": "static"
                  }
                },
                "handleFailure": false,
                "historyLookback": 0,
                "skipIfAlreadyFilled": false,
                "transitions": [],
                "prompt": {
                  "messages": [
                    {
                      "role": "system",
                      "content": "You are ExtractGPT and your only goal is to generate useful content in JSON format for developers to parse and use. You don't know any other language than JSON."
                    },
                    {
                      "role": "user",
                      "content": "```typescript\n/** The user answer to the question \"undefined\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\nagent: undefined\nuser: undefined\n\"\"\""
                    },
                    {
                      "role": "assistant",
                      "content": "{}"
                    },
                    {
                      "role": "user",
                      "content": "The previous transcripts were just examples, don't consider those as valid transcripts for this below task.\n\nThe current Date is {{CURRENT_DATE_TIME}}.\n\nAt this point of the conversation, I need require the user to fill the output in following JSON output to complete the task.\nIf more than one property, try to extract each of them the best you can.\n\n```typescript\n/** The user answer to the question \"{{QUESTION}}\" */\ninterface Output = { value: any }\n```\n\nHere is a conversation between me and a user. Transcript:\n\"\"\"\n(...)\n{{TRANSCRIPT}}\n\"\"\"\n\nIn the last user message, here are the entities found:\n\"\"\"\n{{ENTITIES_IDENTIFIED}}\n\"\"\"\n\nI need you to extract from the conversation transcript above the values the user has provided.\nIf the user has not provided the information I need, I need you to set the value of the missing answer properties to null.\nHave some tolerance to typos and variations in how the user selects from the possible values.\nUse your best judgement to provide the most accurate answer. In general, you can assume the user is cooperative and provides the information asked.\n\n\n\nNow, please reply to me with the above JSON output and nothing but JSON.\nYou should not explain your answer and should not talk back to me. Just JSON."
                    }
                  ],
                  "model": "fast-model",
                  "temperature": 0
                }
              }
            ],
            "defaultTransition": {
              "targetNodeId": null
            },
            "id": "nd-cabf8fcb9c",
            "name": "Standard2"
          },
          {
            "type": "standard",
            "deletable": true,
            "x": 345,
            "y": -525,
            "instructions": [
              {
                "id": "ins-a301577421",
                "category": "Send Messages",
                "type": "content",
                "label": "text",
                "content": {
                  "type": "text",
                  "text": {
                    "valueType": "dynamic",
                    "dynamicValue": "{{workflow.fx.amount}} {{workflow.fx.from}} = {{workflow.fx.converted}} {{workflow.fx.to}}",
                    "staticValue": ""
                  },
                  "typing": {
                    "valueType": "static",
                    "staticValue": true
                  }
                },
                "nodeId": "nd-6119499971",
                "transitions": []
              }
            ],
            "defaultTransition": {
              "targetNodeId": null
            },
            "id": "nd-6119499971",
            "name": "Standard3"
          }
        ],
        "parentFolder": "root"
      }
    ],
    "intents": [
      {
        "id": "int-cancel",
        "name": "cancel",
        "utterances_with_slots": [
          "cancel",
          "abort",
          "abandon",
          "i want to cancel",
          "forget about this",
          "leave",
          "stop",
          "quit",
          "you know what, nevermind",
          "forget it"
        ]
      },
      {
        "id": "int-no",
        "name": "no",
        "utterances_with_slots": [
          "no",
          "i don't want to",
          "absolutely not",
          "nah",
          "nope",
          "not really",
          "not sure",
          "no thanks"
        ]
      },
      {
        "id": "int-yes",
        "name": "yes",
        "utterances_with_slots": [
          "yes",
          "yeah",
          "absolutely",
          "i'd like to",
          "sure ",
          "hmm probably",
          "yup",
          "ok"
        ]
      }
    ],
    "list_entities": [],
    "pattern_entities": [],
    "actions": [],
    "hooks": [
      {
        "id": "hk-99mudt",
        "name": "track_iterations",
        "hookType": "after_llmz_execution",
        "content": "await actions[\"agi/improvement\"].trackIterations({\n  iterations: execution.iterations.map((iteration) => ({\n    uri: `workflow://${execution.location?.workflowId}/${execution.location?.nodeId}`,\n    conversationId: event.conversationId!,\n    executionId: execution.context.id,\n    iterationId: iteration.id,\n    eventId: event.messageId ?? event.id,\n    userId: event.userId!,\n    iteration: {\n      code: iteration.code ?? \"\",\n      ended_ts: iteration.ended_ts,\n      started_ts: iteration.started_ts,\n      messages: iteration.messages,\n      model: iteration.llm.model,\n      mutations: iteration.mutations,\n      status: iteration.status,\n    },\n  })),\n});\n",
        "title": "Track LLMz Iterations",
        "description": "This hook tracks iterations after LLMz execution",
        "origin": {
          "type": "integration",
          "integration": {
            "id": "agi/improvement",
            "name": "agi/improvement",
            "version": "1.0.2",
            "title": "Improvement"
          }
        },
        "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  await actions[\"agi/improvement\"].trackIterations({\n    iterations: execution.iterations.map((iteration) => ({\n      uri: `workflow://${execution.location?.workflowId}/${execution.location?.nodeId}`,\n      conversationId: event.conversationId,\n      executionId: execution.context.id,\n      iterationId: iteration.id,\n      eventId: event.messageId ?? event.id,\n      userId: event.userId,\n      iteration: {\n        code: iteration.code ?? \"\",\n        ended_ts: iteration.ended_ts,\n        started_ts: iteration.started_ts,\n        messages: iteration.messages,\n        model: iteration.llm.model,\n        mutations: iteration.mutations,\n        status: iteration.status\n      }\n    }))\n  });\n  ;\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();"
      },
      {
        "id": "hk-1q8lg5q",
        "name": "inject_learnings",
        "hookType": "before_llmz_execution",
        "content": "const { items } = await actions[\"agi/improvement\"].findFeedback({\n  uri: `workflow://${context.location?.workflowId}/${context.location?.nodeId}`,\n  search: context.transcript.map((x) => `${x.role}: ${x.content}`).join(\"\\n\"),\n});\n\nif (items.length) {\n  context.instructions += `\n\n    ## Learnings from Previous Experiences\n\n    ${items\n      .map(\n        (x, i) => `### Learning ${i + 1}\n    ${x.learning}\n    `\n      )\n      .join(\"\\n\")}\n    `;\n}\n",
        "title": "Provide Learnings to LLMz",
        "description": "This hook injects learnings into LLMz before execution",
        "origin": {
          "type": "integration",
          "integration": {
            "id": "agi/improvement",
            "name": "agi/improvement",
            "version": "1.0.2",
            "title": "Improvement"
          }
        },
        "transpiledCode": "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nasync function __ROOT__() {\n  const { items } = await actions[\"agi/improvement\"].findFeedback({\n    uri: `workflow://${context.location?.workflowId}/${context.location?.nodeId}`,\n    search: context.transcript.map((x) => `${x.role}: ${x.content}`).join(\"\\n\")\n  });\n  if (items.length) {\n    context.instructions += `\n\n    ## Learnings from Previous Experiences\n\n    ${items.map(\n      (x, i) => `### Learning ${i + 1}\n    ${x.learning}\n    `\n    ).join(\"\\n\")}\n    `;\n  }\n  ;\n}\n__name(__ROOT__, \"__ROOT__\");\n; return await __ROOT__();"
      }
    ],
    "qnas": [],
    "knowledge_base": [
      {
        "dataSources": [
          {
            "created_on": 1758646295695,
            "data": {},
            "disabled": false,
            "id": "ds-c5cfe68c21",
            "type": "file-api"
          }
        ],
        "description": "This is about Company Policies ",
        "id": "kb-3a341e7200",
        "modalities": [
          "text"
        ],
        "name": "Company Policies "
      },
      {
        "dataSources": [
          {
            "created_on": 1722900679385,
            "data": {},
            "disabled": false,
            "id": "ds-default",
            "type": "file-api"
          },
          {
            "created_on": 1722900679385,
            "data": {
              "html": ""
            },
            "disabled": false,
            "id": "ds-default-rich-text",
            "type": "rich-text"
          },
          {
            "created_on": 1722900679385,
            "data": {},
            "disabled": false,
            "id": "ds-default-website",
            "type": "web-page"
          }
        ],
        "description": "This is the default knowledge base for the bot",
        "id": "kb-default",
        "name": "Default Knowledge Base",
        "parentFolder": "root"
      }
    ],
    "folders": [],
    "agents": {
      "SummaryAgent": {
        "enabled": false,
        "config": {
          "summaryMaxTokens": 100,
          "transcriptMaxLines": 10,
          "model": "fast-model"
        }
      },
      "TranslatorAgent": {
        "config": {
          "detectLanguage": true
        }
      },
      "KnowledgeAgent": {
        "enabled": false,
        "config": {
          "answerManually": true,
          "context": "Summary of the conversation:\n\"\"\"\n{{conversation.SummaryAgent.summary}}\n\"\"\"\n\nTranscript:\n\"\"\"\n{{conversation.SummaryAgent.transcript}}\n\"\"\"",
          "bestModel": "gpt-4-turbo",
          "fastestModel": "fast-model",
          "questionModel": "fast-model",
          "strategy": "hybrid",
          "chunks": 50
        }
      },
      "PersonalityAgent": {
        "config": {
          "personality": ""
        }
      },
      "VisionAgent": {
        "enabled": true,
        "config": {
          "extractionEnabled": true
        }
      }
    },
    "tables": {
      "table_01K5VCNHWCGW4CCD4RV2GVSE76": {
        "id": "table_01K5VCNHWCGW4CCD4RV2GVSE76",
        "name": "RouterAgentTable",
        "factor": 1,
        "frozen": false,
        "tags": {
          "role": "agents/router/intents",
          "agent": "RouterAgent",
          "system": "true"
        },
        "createdAt": "2025-09-23T13:37:04.910Z",
        "updatedAt": "2025-09-23T13:37:04.910Z",
        "createdBy": "user:4fbc6d8b-98d1-4bef-aba3-ebf801b8d04b",
        "updatedBy": null,
        "isComputeEnabled": false,
        "schema": {
          "type": "object",
          "x-zui": {},
          "required": [
            "phrase",
            "intentId",
            "phraseId"
          ],
          "properties": {
            "phrase": {
              "type": "string",
              "x-zui": {
                "index": 0,
                "searchable": true
              }
            },
            "intentId": {
              "type": "string",
              "x-zui": {
                "index": 1,
                "searchable": true
              }
            },
            "phraseId": {
              "type": "string",
              "x-zui": {
                "index": 2,
                "searchable": true
              }
            }
          },
          "additionalProperties": true
        },
        "parentFolder": "root",
        "selectors": []
      },
      "table_01K5VCNHY8HKPMVD8D08PNRYYN": {
        "id": "table_01K5VCNHY8HKPMVD8D08PNRYYN",
        "name": "Int_Improvement_Feedback_Table",
        "factor": 30,
        "frozen": true,
        "tags": {
          "origin": "integration",
          "purpose": "improvement",
          "version": "Nov-2024",
          "integration": "Int_Improvement",
          "x-studio-icon": "lucide://atom",
          "x-studio-color": "green",
          "x-studio-title": "Feedback",
          "x-studio-readonly": "true",
          "x-studio-description": "Table to store acquired feedback on iterations for active learning"
        },
        "createdAt": "2025-09-23T13:37:04.969Z",
        "updatedAt": "2025-09-23T13:37:04.969Z",
        "createdBy": "user:4fbc6d8b-98d1-4bef-aba3-ebf801b8d04b",
        "updatedBy": null,
        "isComputeEnabled": true,
        "schema": {
          "type": "object",
          "x-zui": {},
          "required": [
            "uri",
            "after",
            "before",
            "feedback",
            "iterationId"
          ],
          "properties": {
            "uri": {
              "type": "string",
              "x-zui": {
                "index": 0,
                "searchable": true
              },
              "maxLength": 250,
              "minLength": 1
            },
            "after": {
              "type": "string",
              "x-zui": {
                "index": 1,
                "searchable": true
              },
              "minLength": 1
            },
            "before": {
              "type": "string",
              "x-zui": {
                "index": 2,
                "searchable": true
              },
              "minLength": 1
            },
            "feedback": {
              "type": "string",
              "x-zui": {
                "index": 3,
                "searchable": true
              },
              "minLength": 1
            },
            "learning": {
              "type": "string",
              "x-zui": {
                "index": 4,
                "computed": {
                  "model": "fast-model",
                  "action": "ai",
                  "prompt": "What would you tell your future self to improve next time?\nCode Before:\n\n```\n{{before}}\n```\n\nFeedback: \"{{feedback}}\"\n\nCode After:\n\n```\n{{after}}\n```\n\nFor the learning, it must be standalone, concise but also accurately depict the situation and feedback you were given.\n\nTry to follow one of the below structures:\n\n<example>\nIn [situation X], I learned that I should [use tool `X` rather than `Y` because ...]\n\n\\`\\`\\`\n// snippet using the right tool\n\\`\\`\\`\n</example>\n\n<example>\nWhen trying to [...], I should use [tool X, tool Y or tool Z] like this:\n\n\\`\\`\\`\n// snippet to explain a drastic code change between before and after, or a non-obvious code snippet\n\\`\\`\\`\n</example>\n\n<example>\nWhenever [Y] happens, I should avoid [...] and instead [...].\n\n\\`\\`\\`\n// snippet to implement the behavior change\n\\`\\`\\`\n</example>\n\nKeep it concise. Do not refer to \"this situation\" or to the feedback. Both have been provided by an expert reviewing the conversation, NOT the actual user. So you must embed the content from the above inside your learning so it is standalone.\nMake sure to include a code snippet that teaches the right behavior, but remaining generic enough to adapt to different conversations in the future.\n",
                  "dependencies": [
                    "before",
                    "feedback",
                    "after"
                  ]
                },
                "searchable": true
              },
              "default": null,
              "nullable": true,
              "minLength": 1
            },
            "iterationId": {
              "type": "string",
              "x-zui": {
                "index": 5,
                "searchable": true
              },
              "maxLength": 100,
              "minLength": 1
            }
          },
          "additionalProperties": true
        },
        "parentFolder": "root",
        "selectors": []
      }
    },
    "schemas": [],
    "versions": [],
    "revision": 311,
    "revisionMetadata": {
      "lastRevisionCheckAt": "2025-09-25T14:59:54.802Z",
      "lastRevisionId": 310,
      "multiplayerStatus": "connected",
      "multiplayerTraces": [
        "2025-09-25T14:59:58.257Z: Initializing Client... - {\"initializing\":false,\"initialized\":false}",
        "2025-09-25T14:59:58.259Z: Connection State: initialized -> connecting (ok)",
        "2025-09-25T15:00:03.084Z (XeBpYo_Bjj): Connection State: connecting -> connected (ok)",
        "2025-09-25T15:00:03.261Z (XeBpYo_Bjj): Initializing Client... - {\"initializing\":true,\"initialized\":false}",
        "2025-09-25T15:00:04.144Z (XeBpYo_Bjj): Multiplayer session initialized!",
        "2025-09-25T15:00:04.796Z (XeBpYo_Bjj): Player entered channel - {\"sessionId\":\"sess_01K60P6N8FG18Q9GYVYE8VAQ5B\",\"connectionId\":\"XeBpYo_Bjj\",\"joinedAt\":\"2025-09-25T15:00:04.417Z\",\"email\":\"ibrahim.imran@iaim.ca\",\"color\":\"var(--orange-8)\",\"workspaceUserId\":\"4fbc6d8b-98d1-4bef-aba3-ebf801b8d04b\",\"lastActiveAt\":\"Thu, 25 Sep 2025 15:00:04 GMT\",\"connectedAt\":\"Thu, 25 Sep 2025 15:00:04 GMT\",\"sections\":[]}",
        "2025-09-25T15:00:04.797Z (XeBpYo_Bjj): ibrahim.imran@iaim.ca was elected as master - \"sess_01K60P6N8FG18Q9GYVYE8VAQ5B\""
      ],
      "players": [
        "ibrahim.imran@iaim.ca / sess_01K60P6N8FG18Q9GYVYE8VAQ5B / Thu, 25 Sep 2025 15:00:04 GMT /  Thu, 25 Sep 2025 15:00:04 GMT"
      ],
      "savedAt": "2025-09-25T15:00:12.689Z",
      "savedBy": "ibrahim.imran@iaim.ca",
      "sessionId": "sess_01K60P6N8FG18Q9GYVYE8VAQ5B"
    },
    "identity": {
      "name": "FAQ Agent",
      "manual_instructions": "",
      "icon": {
        "type": "emoji",
        "emoji": "ü§ñ ",
        "background_color": "var(--orange-5)"
      },
      "ai_summary": {
        "value": "Chatbot named sparkling-eland provides concise information.",
        "input_hash": "7j8s9",
        "generated_at": "2025-02-26T18:41:46.789Z",
        "version": "1.0.0"
      }
    }
  }